[
  { "name": "REGISTER ok with ttl",
    "mode": "json",
    "send": { "type": "REGISTER", "namespace": "room1", "name": "peerA", "port": 4000, "ttl": 60 },
    "expect": { "status": "OK", "subset": { "status": "OK", "ttl": 60 }, "has": ["observed_ip","observed_port"], "types": { "ttl": "int", "observed_ip": "str", "observed_port": "int" } }
  },

  { "name": "REGISTER ok default ttl(7200)",
    "mode": "json",
    "send": { "type": "REGISTER", "namespace": "room1", "name": "peerB", "port": 5000 },
    "expect": { "status": "OK", "subset": { "status": "OK", "ttl": 7200 }, "has": ["observed_ip","observed_port"], "types": { "ttl": "int" } }
  },

  { "name": "REGISTER bad namespace (empty) -> bad_namespace",
    "mode": "json",
    "send": { "type": "REGISTER", "namespace": "", "name": "badPeer", "port": 1234 },
    "expect": { "subset": { "status": "ERROR", "error": "bad_namespace" } }
  },

  { "name": "REGISTER bad port (out of range) -> bad_port",
    "mode": "json",
    "send": { "type": "REGISTER", "namespace": "room1", "name": "badPort", "port": 99999 },
    "expect": { "subset": { "status": "ERROR", "error": "bad_port" } }
  },

  { "name": "REGISTER bad port (negative) -> bad_port",
    "mode": "json",
    "send": { "type": "REGISTER", "namespace": "room1", "name": "negPort", "port": -5 },
    "expect": { "subset": { "status": "ERROR", "error": "bad_port" } }
  },

  { "name": "REGISTER bad name (empty) -> bad_name",
    "mode": "json",
    "send": { "type": "REGISTER", "namespace": "roomX", "name": "", "port": 1234 },
    "expect": { "equals": { "status": "ERROR", "error": "bad_name" } }
  },

  { "name": "REGISTER bad name (>64 chars) -> bad_name",
    "mode": "json",
    "send": { "type": "REGISTER", "namespace": "roomX", "name": "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "port": 1234 },
    "expect": { "equals": { "status": "ERROR", "error": "bad_name" } }
  },

  { "name": "REGISTER bad ttl (string) -> bad_ttl",
    "mode": "json",
    "send": { "type": "REGISTER", "namespace": "roomX", "name": "peerTTL", "port": 1234, "ttl": "nope" },
    "expect": { "equals": { "status": "ERROR", "error": "bad_ttl" } }
  },

  { "name": "REGISTER ttl clamp below 1 -> becomes 1",
    "mode": "json",
    "send": { "type": "REGISTER", "namespace": "roomX", "name": "peerClampLow", "port": 1234, "ttl": 0 },
    "expect": { "subset": { "status": "OK" }, "regex": "\"ttl\"\\s*:\\s*1" }
  },

  { "name": "REGISTER ttl clamp above 86400 -> becomes 86400",
    "mode": "json",
    "send": { "type": "REGISTER", "namespace": "roomX", "name": "peerClampHigh", "port": 1234, "ttl": 999999 },
    "expect": { "subset": { "status": "OK" }, "regex": "\"ttl\"\\s*:\\s*86400" }
  },

  { "name": "REGISTER upsert same (ip,ns,name) -> update (no duplicate)",
    "mode": "json",
    "send": { "type": "REGISTER", "namespace": "roomUp", "name": "same", "port": 1111, "ttl": 60 },
    "expect": { "subset": { "status": "OK" } }
  },
  { "name": "REGISTER upsert update (same key, new port)",
    "mode": "json",
    "send": { "type": "REGISTER", "namespace": "roomUp", "name": "same", "port": 2222, "ttl": 120 },
    "expect": { "subset": { "status": "OK" } }
  },
  { "name": "DISCOVER roomUp confirms single updated peer",
    "mode": "json",
    "send": { "type": "DISCOVER", "namespace": "roomUp" },
    "expect": { "subset": { "status": "OK" }, "has": ["peers"], "regex": "\"port\"\\s*:\\s*2222" }
  },

  { "name": "DISCOVER room1 (after regs)",
    "mode": "json",
    "send": { "type": "DISCOVER", "namespace": "room1" },
    "expect": { "subset": { "status": "OK" }, "has": ["peers"], "types": { "peers": "list" } }
  },

  { "name": "DISCOVER room2 (empty)",
    "mode": "json",
    "send": { "type": "DISCOVER", "namespace": "room2" },
    "expect": { "equals": { "status": "OK", "peers": [] } }
  },

  { "name": "DISCOVER without namespace (all)",
    "mode": "json",
    "send": { "type": "DISCOVER" },
    "expect": { "subset": { "status": "OK" }, "has": ["peers"], "types": { "peers": "list" } }
  },

  { "name": "UNREGISTER by namespace only (my ip)",
    "mode": "json",
    "send": { "type": "UNREGISTER", "namespace": "room1" },
    "expect": { "equals": { "status": "OK" } }
  },

  { "name": "UNREGISTER invalid port (string) -> ERROR bad_port",
    "mode": "json",
    "send": { "type": "UNREGISTER", "namespace": "room2", "port": "abc" },
    "expect": { "subset": { "status": "ERROR" }, "regex": "bad_port" }
  },

  { "name": "UNREGISTER without namespace -> OK but removes nothing (behavior doc)",
    "mode": "json",
    "send": { "type": "UNREGISTER" },
    "expect": { "equals": { "status": "OK" } }
  },

  { "name": "JSON without type -> parser ERROR -> Unknown command",
    "mode": "json",
    "send": { "foo": "bar" },
    "expect": { "equals": { "status": "ERROR", "message": "Unknown command" } }
  },

  { "name": "Unknown command",
    "mode": "json",
    "send": { "type": "INVALIDCMD" },
    "expect": { "equals": { "status": "ERROR", "message": "Unknown command" } }
  },

  { "name": "Empty line -> 'Empty request line'",
    "mode": "raw",
    "send": "",
    "expect": { "equals": { "status": "ERROR", "message": "Empty request line" } }
  },

  { "name": "Whitespace-only line -> 'Empty request line'",
    "mode": "raw",
    "send": "   ",
    "expect": { "equals": { "status": "ERROR", "message": "Empty request line" } }
  },

  { "name": "Line too long (>32KB) -> line_too_long (synthetic)",
    "mode": "synth",
    "synth": { "pattern": "curly_a", "count": 33000 },
    "expect": { "subset": { "status": "ERROR", "error": "line_too_long" }, "regex": "\"limit\"\\s*:\\s*32768" }
  },

  { "name": "REGISTER small TTL=2s (roomTTL)",
    "mode": "json",
    "send": { "type": "REGISTER", "namespace": "roomTTL", "name": "short", "port": 3333, "ttl": 2 },
    "expect": { "subset": { "status": "OK" } }
  },

  { "name": "DISCOVER roomTTL shows expires_in",
    "mode": "json",
    "send": { "type": "DISCOVER", "namespace": "roomTTL" },
    "expect": { "subset": { "status": "OK" }, "regex": "\"expires_in\"\\s*:\\s*\\d+" }
  },

  { "name": "WAIT > TTL to trigger sweep",
    "mode": "json",
    "delay": 3,
    "send": { "type": "DISCOVER", "namespace": "roomTTL" },
    "expect": { "equals": { "status": "OK", "peers": [] } }
  }
]

